openapi: 3.0.4
info:
  title: Menu dish
  description: |-
    This is a restaurant API that allows you to manage the dishes available in the system. With it, you can create, query, update and remove dishes, as well as authenticate users through login and registration endpoints.
  contact:
    email: theuscampos45@gmail.com
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000/
tags:
  - name: Dishes
    description: Operations for creating, reading, updating and removing dishes in the system.
  - name: User
    description: Endpoints related to user authentication, such as login (sign in) and registration (signup).
paths:
  /auth/signin:
    post:
      tags:
        - User
      summary: User sign in
      description: Performs user authentication and returns an access token (JWT) if successful.
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: joaozinho123
                password: Password@123
      responses:
        '200':
          description: Authentication successful. Returns the access token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                access_token: "eyJ0eXAiOiJKV1QiLCJh..."
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid username or password."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "An unexpected error has occurred."
  /auth/signup:
    post:
      tags:
        - User
      summary: User sign up
      description: Registers a new user in the system with the data provided. Role_id=1 for admin user and role_id=2 for normal user 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: joaozinho123
              password: Passwor@123
              role_id: 1
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                access_token: "eyJ0eXAiOiJKV1QiLCJh..."
        '400':
          description: User already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Username already registered."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Error creating user."
  /dish:
    post:
      tags:
        - Dishes
      summary: Add a new dish.
      description: Add a new dish.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Dish object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
            example:
              name: "Feijoada"
              price: 29.90
              description: "Traditional Brazilian stew"
      responses:
        '201':
          description: Dish created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
              example:
                id: 10
                name: "Feijoada"
                price: 29.90
                description: "Traditional Brazilian stew"
        '422':
          description: Returns one or all three messages if one or all three values are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 422
                message:
                  name:
                    - "The name of the dish cannot be empty."
                  description:
                    - "The description of the dish cannot be empty."
                  price:
                    - "Price must be greater than or equal to 0."
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Dishes
      summary: Retrieve all dishes
      description: Returns a list of all available dishes. The list may be empty if no dishes are found.
      responses:
        '200':
          description: A list of dishes or an empty list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
              example:
                - description: "Classic Italian pasta dish"
                  id: 1
                  name: "Spaghetti Carbonara"
                  price: 12.5
                - description: "Pizza with tomatoes, mozzarella, and basil"
                  id: 2
                  name: "Margherita Pizza"
                  price: 10.0
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'       
  /dish/{dishId}:
    get:
      tags:
        - Dishes
      summary: Retrieve a dish by its ID
      description: Returns a single dish based on the provided ID.
      operationId: getDishById
      parameters:
        - name: dishId
          in: path
          description: ID of dish to return
          required: true
          schema:
            type: integer
            format: int64   
      responses:
        '200':
          description: Dish retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
              example:
                description: "Classic Italian pasta dish"
                id: 1
                name: "Spaghetti Carbonara"
                price: 12.5
        '400':
          description: Invalid dish ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: "Invalid ID format"
        '404':
          description: Dish not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: "Dish not found with ID 999"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Dishes
      summary: Update an existing dish
      description: Updates the details of an existing dish using its unique ID.
      operationId: updateDish
      parameters:
        - name: dishId
          in: path
          required: true
          description: The unique identifier of the dish to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        description: Dish object with updated fields
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
            example:
              name: "Updated Dish Name"
              price: 14.99
              description: "Updated description of the dish"
      responses:
        '200':
          description: Dish updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
              example:
                description: "Updated description of the dish"
                id: 1
                name: "Updated Dish Name"
                price: 14.99
        '400':
          description: Invalid dish ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: "Invalid ID format"
        '404':
          description: Dish not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: "Dish not found with ID 99"
        '422':
          description: Validation error on the provided data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 422
                message: "Price must be a positive number"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Dishes
      summary: Removes a dish from the system.
      description: Permanently deletes a dish identified by ID.
      operationId: deleteDish
      parameters:
        - name: dishId
          in: path
          required: true
          description: ID of the dish to be removed.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Dish removed successfully.
        '400':
          description: Invalid dish ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: "Invalid ID format"
        '404':
          description: Dish not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: "Dish not found with ID 999"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Insert "Bearer {your token}"
  schemas:
    Dish:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          type: string
          example: Spaghetti
        description:
          type: string
          example: Spaghetti is a long, thin, solid, cylindrical pasta.
        price:
          type: number
          format: float
          description: Preço do prato em reais (R$)
          example: 9.99    
    User:
      type: object
      properties:
        username:
          type: string
          example: joaozinho123
        password:
          type: string
          format: password
          example: Password@123
      required:
        - username
        - password
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Token JWT para autenticação nas próximas requisições.
          example: eyJ0eXAiOiJKV1QiLCJh...    
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message